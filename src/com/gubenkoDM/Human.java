package com.gubenkoDM;

/**
 * Created by Nestor on 15.03.2017.
 */
/*
 Абстрактный(Виртуральный) класс создан для удобства проектирования
 Класс является абстрактный если у него есть модификатор abstract (его можно ставить как перед модификатором доступа так и после)
 Нельзя создать объекты абстрактного класса
 Абстрактный класс может иметь как абстактные методы так и обычные. Также в нем могут присутствовать поля, как в обычном классе
 Абстрактный класс может не иметь внутри себя ни одного абстрактного метода. Это полезно чтобы запретить создание объектов такого класса.
 Абстрактный класс может содержать внутри себя статические методы.
 !!!Абстактный класс НЕ может содержать внутри себя(поля) объекты, НЕ может содержать абстрактных конструкторов, НЕ может содерать абстрактных статических методов так как они не могут быть переопределены!!!
 !!!Важно! При создании объекта предка с родителем абстрактным классом перед тем как вызовется конструктор предка всегда будет вызываться конструктор родителя!!! Для обычных классов это работате также.
 Абстрактный класс может быть вовсе пустым(не содержать полей и методов). Обычный класс тоже может быть пустым.
 Абстрактный метод подразумевает что классы наследники должны будут реализовать(переопределить) все абстактные методы
 У абстрактного метода абстактного класса не может быть реализации(тела метода).
 Абстрактный класс может наследоваться от другого абстактного класса, при этом он в этом случае не обязан реализовывать абстрактные методы
 предка.
 Если он этого не сделает что класс который будет от него наследоваться должен будет это сделать сам.
 Если он это сделает то класс наследник может не реализовывать реализованные методы, а пользоваться ими как обычными.
 */

public abstract class Human {
    private String gr ="Greeting";
    //private Man mmm=new Man(); //!!!

    Human(){
        System.out.println("Конструктор");
    }

//    abstract Human(){                    //!!!
//        System.out.println("Конструктор");
//    }


    public abstract void go();

    public void stop(){
        System.out.println("Стою!");
    }

    public void greet(){
        System.out.println(gr);
    }

    public static void greet2(){
        System.out.println("Hi");
    }

//    public abstract static void greet3(){ //!!!
//        System.out.println("Hello");
//    }
}
